// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExecuteAutomation.Reqnroll.Dynamics.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AsyncAutoFixtureFeature : object, Xunit.IClassFixture<AsyncAutoFixtureFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "AsyncAutoFixture", "Testing asynchronous operations with AutoFixture integration", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AsyncAutoFixture.feature"
#line hidden
        
        public AsyncAutoFixtureFeature(AsyncAutoFixtureFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create dynamic instance with AutoFixture asynchronously")]
        [Xunit.TraitAttribute("FeatureTitle", "AsyncAutoFixture")]
        [Xunit.TraitAttribute("Description", "Create dynamic instance with AutoFixture asynchronously")]
        public async System.Threading.Tasks.Task CreateDynamicInstanceWithAutoFixtureAsynchronously()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create dynamic instance with AutoFixture asynchronously", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Username",
                            "Email",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Guid",
                            "Zipcode"});
                table1.AddRow(new string[] {
                            "auto.string",
                            "auto.email",
                            "auto.date",
                            "auto.phone",
                            "auto.guid",
                            "auto.zipcode"});
#line 6
        await testRunner.GivenAsync("I have a table for async AutoFixture processing", ((string)(null)), table1, "Given ");
#line hidden
#line 9
        await testRunner.WhenAsync("I create a dynamic instance with AutoFixture asynchronously", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
        await testRunner.ThenAsync("the async AutoFixture instance should have all fields populated", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 11
        await testRunner.AndAsync("the Email field should contain @ symbol", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
        await testRunner.AndAsync("the Guid field should be a valid GUID", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create dynamic set with AutoFixture asynchronously")]
        [Xunit.TraitAttribute("FeatureTitle", "AsyncAutoFixture")]
        [Xunit.TraitAttribute("Description", "Create dynamic set with AutoFixture asynchronously")]
        public async System.Threading.Tasks.Task CreateDynamicSetWithAutoFixtureAsynchronously()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create dynamic set with AutoFixture asynchronously", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Username",
                            "Email",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Guid",
                            "Zipcode"});
                table2.AddRow(new string[] {
                            "_",
                            "_",
                            "_",
                            "_",
                            "_",
                            "_"});
                table2.AddRow(new string[] {
                            "_",
                            "_",
                            "_",
                            "_",
                            "_",
                            "_"});
#line 15
        await testRunner.GivenAsync("I have a table with multiple rows for async AutoFixture processing", ((string)(null)), table2, "Given ");
#line hidden
#line 19
        await testRunner.WhenAsync("I create a dynamic set with AutoFixture asynchronously", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
        await testRunner.ThenAsync("the async AutoFixture set should have 2 items", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
        await testRunner.AndAsync("all items in the set should have auto-generated fields", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create multiple entities asynchronously")]
        [Xunit.TraitAttribute("FeatureTitle", "AsyncAutoFixture")]
        [Xunit.TraitAttribute("Description", "Create multiple entities asynchronously")]
        public async System.Threading.Tasks.Task CreateMultipleEntitiesAsynchronously()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create multiple entities asynchronously", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
        await testRunner.GivenAsync("I have registered a User entity type for async testing", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
        await testRunner.WhenAsync("I create 3 User entities asynchronously", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
        await testRunner.ThenAsync("I should have 3 User entities with auto-generated properties", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AsyncAutoFixtureFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AsyncAutoFixtureFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExecuteAutomation.Reqnroll.Dynamics.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TableTransformationUtilitiesFeature : object, Xunit.IClassFixture<TableTransformationUtilitiesFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "TableTransformationUtilities", "Testing the new table transformation utilities", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TableTransformationUtilities.feature"
#line hidden
        
        public TableTransformationUtilitiesFeature(TableTransformationUtilitiesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter rows from a table based on a condition")]
        [Xunit.TraitAttribute("FeatureTitle", "TableTransformationUtilities")]
        [Xunit.TraitAttribute("Description", "Filter rows from a table based on a condition")]
        public async System.Threading.Tasks.Task FilterRowsFromATableBasedOnACondition()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Filter rows from a table based on a condition", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age",
                            "Status"});
                table8.AddRow(new string[] {
                            "John",
                            "30",
                            "Active"});
                table8.AddRow(new string[] {
                            "Alice",
                            "25",
                            "Inactive"});
                table8.AddRow(new string[] {
                            "Bob",
                            "40",
                            "Active"});
                table8.AddRow(new string[] {
                            "Claire",
                            "35",
                            "Active"});
#line 6
        await testRunner.GivenAsync("I have a table with multiple rows", ((string)(null)), table8, "Given ");
#line hidden
#line 12
        await testRunner.WhenAsync("I filter the rows where Status is Active", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
        await testRunner.ThenAsync("I should get a filtered table with 3 rows", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Project specific columns from a table")]
        [Xunit.TraitAttribute("FeatureTitle", "TableTransformationUtilities")]
        [Xunit.TraitAttribute("Description", "Project specific columns from a table")]
        public async System.Threading.Tasks.Task ProjectSpecificColumnsFromATable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Project specific columns from a table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age",
                            "Email",
                            "Phone"});
                table9.AddRow(new string[] {
                            "John",
                            "Doe",
                            "30",
                            "john@example.com",
                            "123-456-7890"});
                table9.AddRow(new string[] {
                            "Alice",
                            "Smith",
                            "25",
                            "alice@example.com",
                            "234-567-8901"});
#line 16
        await testRunner.GivenAsync("I have a table with multiple columns", ((string)(null)), table9, "Given ");
#line hidden
#line 20
        await testRunner.WhenAsync("I select only the FirstName and Email columns", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
        await testRunner.ThenAsync("I should get a projected table with 2 columns", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 22
        await testRunner.AndAsync("the columns should be FirstName and Email", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create nested dynamic objects from a table")]
        [Xunit.TraitAttribute("FeatureTitle", "TableTransformationUtilities")]
        [Xunit.TraitAttribute("Description", "Create nested dynamic objects from a table")]
        public async System.Threading.Tasks.Task CreateNestedDynamicObjectsFromATable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create nested dynamic objects from a table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Entity",
                            "Properties"});
                table10.AddRow(new string[] {
                            "User",
                            "{\"Name\": \"John\", \"Age\": 30, \"IsActive\": true}"});
                table10.AddRow(new string[] {
                            "Address",
                            "{\"Street\": \"Main St\", \"Number\": 123, \"City\": \"NY\"}"});
#line 25
        await testRunner.GivenAsync("I have a table with nested JSON data", ((string)(null)), table10, "Given ");
#line hidden
#line 29
        await testRunner.WhenAsync("I create a nested dynamic object", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
        await testRunner.ThenAsync("the User name should be John", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
        await testRunner.AndAsync("the User age should be 30", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
        await testRunner.AndAsync("the Address street should be Main St", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await TableTransformationUtilitiesFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await TableTransformationUtilitiesFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
